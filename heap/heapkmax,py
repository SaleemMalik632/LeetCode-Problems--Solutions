def build_heap(array):
    # Start from the last non-leaf node
    last_non_leaf = len(array) // 2 - 1 
    # Perform heapify-down operations on each node starting from the last non-leaf node
    for i in range(last_non_leaf, -1, -1):
        # i will be 2, 1, 0 because last_non_leaf is 2 and range is from 2 to 0
        heapify_down(array, i,len(array))
def heapify_down(array, index,heapsize):
    # Calculate indices of left and right children
    left_child_index = 2 * index + 1 # vale of index is 2 so left_child_index will be 5
    right_child_index = 2 * index + 2 # vale of index is 2 so right_child_index will be 6
    largest = index  # Assume the current node is the largest

    # len(array) is 6 and left_child_index is 5 so it is less than the length of the array so it will go inside the if condition
    if left_child_index < heapsize and array[left_child_index] > array[largest]:
        largest = left_child_index

    # len(array) is 6 and right_child_index is 6 so it is greater than the length of the array so it will not go inside the if condition
    if right_child_index < heapsize and array[right_child_index] > array[largest]:
        largest = right_child_index

    # If largest is not the current index, swap and heapify down recursively
    if largest != index:
        array[index], array[largest] = array[largest], array[index]
        heapify_down(array, largest,heapsize)

def heapify_sort(array):
    build_heap(array)
    for i in range(len(array) - 1, 0, -1):
        # Swap the root node with the last node in the heap (largest element will be at the end) and heapify down the root node to maintain the heap property   
        array[0], array[i] = array[i], array[0]
        # Heapify down the root node to maintain the heap property after swapping the root node with the last node in the heap 
        heapify_down(array, 0, i) # i is the heapsize
    


# Example usage:
array = [3,2,3,1,2,4,5,5,6]
# tree will be like this
#         3
#        / \
#       2   3
#      / \ / \
#     1  2 4  5
#    / \
#   5   6
# After building the heap the tree will be like this
#         1
#        / \
#       2   3
#      / \ / \
#     5  2 4  5
#    / \
#   3   6
# After sorting the heap the tree will be like this and here are all the steps of heapify_sort function
#         1
#        / \
#       2   2   
#      / \ / \
#     3  3 4  5
#    / \
#   5   5 6
# So the final output will be [1, 2, 2, 3, 3, 4, 5, 5, 6]


# output will be [1, 2, 2, 3, 3, 4, 5, 5, 6]
heapify_sort(array)
print(array)  # Output: [1, 2, 2, 3, 3, 4, 5, 5, 6]
